<?php
/**
 * Created by PhpStorm.
 * User: wangmengyu
 * Date: 18-2-8
 * Time: 下午1:48
 */

/**
 * 饮料 抽象类
 * Class Beverage
 */
abstract class Beverage{
    protected $desc;
    protected $price;
    protected $size;
    protected $sizePrice = [
        'tall'=>0.1,
        'grande'=>0.15,
        'venti'=>0.2,
    ];
    public  function getDescription(){
        return $this->desc;
    }
    public function getPrice(){
        return $this->price;
    }
    public function getSize(){
        return $this->size;
    }
    public function setSize($size){
        $this->size = $size;
    }

    /**
     * 获得杯型价格
     * @return int|mixed
     */
    public function getSizePrice(){
        if (isset($this->sizePrice[$this->size])) {
            return $this->sizePrice[$this->size];
        }
        return 0;
    }
    public abstract function cost();
}

/**
 * 配料 抽象类 ，继承Beverage
 * Class CondimentDecorator
 */
abstract class CondimentDecorator extends Beverage{

    /**
     * @var Beverage
     */
    protected $beverage;

    public function __construct($beverage)
    {
        $this->beverage = $beverage;
    }

    /**
     * 描述
     * 配料的描述+配料使用本体的描述
     * @return string
     */
    public function getDescription()
    {
        return $this->beverage->getDescription().', ' . $this->desc; // TODO: Change the autogenerated stub
    }

    /**
     * 描述
     * 配料价格+配料使用本体的价格
     * @return mixed
     */
    public function cost()
    {
       var_dump('+ [item]:' . $this->desc . ' [price]' . $this->getPrice());
       return $this->beverage->cost()+$this->getPrice();
    }
}

/**
 * 意式浓缩 - 继承Beverage
 * Class Espresso
 */
class Espresso extends Beverage{

    public function __construct()
    {
        $this->desc = 'Espresso';
        $this->price = 1.99;
    }

    public function cost()
    {
        return $this->getPrice();
    }

}

/**
 * 中度烘焙 - 继承Beverage
 * Class HouseBlend
 */
class HouseBlend extends Beverage{
    public function __construct()
    {
        $this->desc = 'House Blend Coffee';
        $this->price = 0.89;
    }

    public function cost()
    {
        return $this->price;
    }
}

/**
 * 深度烘焙 - 继承Beverage
 * Class DarkRoast
 */
class DarkRoast extends Beverage{
    public function __construct()
    {
        $this->desc = 'Dark Roast Coffee';
        $this->price =0.99;
    }
    public function cost()
    {
        // TODO: Implement cost() method.
        return $this->price;
    }
}

/**
 * 脱因咖啡 - 继承Beverage
 * Class Decaf
 */
class Decaf extends Beverage{
    public function __construct()
    {
        $this->desc = 'Decaf Coffee';
        $this->price = 1.05;
    }

    public function cost()
    {
        // TODO: Implement cost() method.
        return $this->getPrice();
    }
}

/**
 * 摩卡[装饰器] - 继承 CondimentDecorator，
 * Class Mocha
 */
class Mocha extends CondimentDecorator{
    public function __construct($beverage)
    {
        parent::__construct($beverage);
        $this->desc = 'Mocha';
        $this->price = 0.20;
    }
}

/**
 * 牛奶 - 装饰器
 * Class Milk
 */
class Milk extends CondimentDecorator{

    public function __construct($beverage)
    {
        parent::__construct($beverage);
        $this->desc = 'Milk';
        $this->price = 0.1;
    }
}

/**
 * 豆奶 - 装饰器
 * Class Milk
 */
class Soy extends CondimentDecorator{
    public function __construct($beverage)
    {
        parent::__construct($beverage);
        $this->desc = 'Soy';
        $this->price = 0.15;
    }
}

/**
 * 奶泡 - 装饰器
 * Class Milk
 */
class Whip extends CondimentDecorator{
    public function __construct($beverage)
    {
        parent::__construct($beverage);
        $this->desc = 'Whip';
        $this->price = 0.1;
    }
}

//测试代码，双倍摩卡豆浆奶泡拿铁：中度烘焙+豆浆+2份摩卡+奶泡
$coffee = new HouseBlend();
var_dump('base coffee:' . $coffee->getDescription(). ' ' . $coffee->getPrice());
$soy = new Soy($coffee);
$mochaOne = new Mocha($soy);
$mochaTwo = new Mocha($mochaOne);
$whip = new Whip($mochaTwo);
$coffee->setSize('tall');
$total = $coffee->getSizePrice()+$whip->cost();
var_dump('total:' . $whip->getDescription()
    . ' base cost:' . $whip->cost()
    . ' size price:'
    . $coffee->getSizePrice()
    .'total:' . $total)
;






